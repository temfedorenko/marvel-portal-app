{"version":3,"file":"static/js/24.61641bf6.chunk.js","mappings":"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","sources":["components/appBanner/AppBanner.js","components/errorMessage/ErrorMessage.js","components/comicsList/ComicsList.js","components/comicsSearch/ComicsSearch.js","components/pages/ComicsPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import './appBanner.scss';\nimport avengers from '../../resources/img/Avengers.png';\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\n\nconst AppBanner = () => {\n    return (\n        <div className=\"app__banner\">\n            <img src={avengers} alt=\"Avengers\"/>\n            <div className=\"app__banner-text\">\n                New comics every week!<br/>\n                Stay tuned!\n            </div>\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\n        </div>\n    )\n}\n\nexport default AppBanner;","import error from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: 'block',\n        width: '250px',\n        height: '250px',\n        objectFit: 'contain',\n        margin: '0 auto',\n      }}\n      src={error}\n      alt=\"error animation\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect, useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\n\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./comicsList.scss\";\n\nconst setContent = (process, Component, newItemsLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemsLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"unespected process state\");\n  }\n};\n\nconst ComicsList = () => {\n  const [comicsList, setComicsList] = useState([]);\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\n  const [offset, setOffset] = useState(200);\n  const [comicsEnded, setComicsEnded] = useState(false);\n\n  const { getAllComics, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n    getAllComics(offset)\n      .then(onComicsListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onComicsListLoaded = (newComicsList) => {\n    let ended = false;\n    if (newComicsList.length < 8) {\n      ended = true;\n    }\n\n    setComicsList((comicsList) => [...comicsList, ...newComicsList]);\n    setNewItemsLoading(false);\n    setOffset((offset) => offset + 8);\n    setComicsEnded(ended);\n  };\n\n  const items = comicsList.map((item, i) => {\n    return (\n      <CSSTransition key={i} timeout={700} classNames=\"comics__item\">\n        <li className=\"comics__item\">\n          <Link to={`/comics/${item.id}`}>\n            <img\n              src={item.thumbnail}\n              alt={item.title}\n              className=\"comics__item-img\"\n            />\n            <div className=\"comics__item-name\">{item.title}</div>\n            <div className=\"comics__item-price\">{item.price}</div>\n          </Link>\n        </li>\n      </CSSTransition>\n    );\n  });\n\n  const itemsContent = () => {\n    return (\n      <ul className=\"comics__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, itemsContent, newItemsLoading);\n  }, [process]);\n\n  return (\n    <div className=\"comics__list\">\n      {elements}\n      <button\n        onClick={() => onRequest(offset)}\n        className=\"button button__main button__long\"\n        disabled={newItemsLoading}\n        style={{ display: comicsEnded ? \"none\" : \"block\" }}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nexport default ComicsList;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport \"../comicsSearch/comicsSearch.scss\";\n\nconst ComicsSearch = () => {\n  const [comicName, setComicName] = useState(\"\");\n  const [comic, setComic] = useState([]);\n  const [blockVisibility, setBlockVisibility] = useState(false);\n  const { getComicByName, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    if (comicName) {\n      getComicByName(comicName)\n        .then((res) => setComic(res))\n        .then(() => setProcess(\"confirmed\"));\n    }\n  }, [comicName]);\n\n  const searchResults = comic.map((item) => (\n    <li key={item.id} className=\"result__item\">\n      <Link to={`/comics/${item.id}`} className=\"result__item-link\">\n        <img\n          className=\"result__item-img\"\n          src={item.thumbnail}\n          alt={item.title}\n        />\n        <div className=\"result__item-title\">{item.title}</div>\n        <div className=\"result__item-price\">{item.price}</div>\n      </Link>\n      <div className=\"background\"></div>\n    </li>\n  ));\n\n  const content =\n    comic.length > 0 ? (\n      <ul className=\"result__items\">{searchResults}</ul>\n    ) : (\n      <div className=\"result__not-found\">\n        <p>This comic was not found. </p>\n        <p>Please, check the name and try again</p>\n      </div>\n    );\n  const errorMessage = process === \"error\" ? <ErrorMessage /> : null;\n  const spinner = process === \"loading\" ? <Spinner /> : null;\n\n  return (\n    <div className=\"comic__search\">\n      <form className=\"comic__search-form\" onSubmit={(e) => e.preventDefault()}>\n        <label htmlFor=\"charName\" className=\"comic__search-label\">\n          Find a comic by name:\n        </label>\n        <div className=\"comic__search-wrapper\">\n          <input\n            className=\"comic__search-input\"\n            id=\"comicName\"\n            type=\"text\"\n            name=\"comicName\"\n            value={comicName}\n            placeholder=\"Enter a name here\"\n            onChange={(e) => setComicName(e.target.value)}\n            onFocus={() => setBlockVisibility(true)}\n            onBlur={() => setTimeout(() => setBlockVisibility(false), 100)}\n          />\n          <div\n            className={\n              blockVisibility && comicName\n                ? \"comic__search-result result active\"\n                : \"comic__search-result result\"\n            }\n          >\n            {errorMessage}\n            {spinner}\n            {process !== \"loading\" ? content : null}\n          </div>\n        </div>\n        <div className={blockVisibility ? \"backdrop active\" : \"backdrop\"}></div>\n      </form>\n    </div>\n  );\n};\n\nexport default ComicsSearch;\n","import { Helmet } from \"react-helmet\";\n\nimport AppBanner from \"../appBanner/AppBanner\";\nimport ComicsList from \"../comicsList/ComicsList\";\nimport ComicsSearch from \"../comicsSearch/ComicsSearch\";\n\nconst ComicsPage = () => {\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Page with list of marvel comics\" />\n        <title>Marvel comics</title>\n      </Helmet>\n      <AppBanner />\n      <ComicsSearch />\n      <ComicsList />\n    </>\n  );\n};\n\nexport default ComicsPage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=825a76f0069296d43a59fc01b51c7129\";\n  // const _apiKey = \"apikey=211c085f78942d7b553a3e154be3772e\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?orderBy=-modified&limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 200) => {\n    const res = await request(\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const getComicByName = async (name = \"\") => {\n    const res = await request(\n      `${_apiBase}comics?titleStartsWith=${name}&limit=30&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"Not available\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects.language || \"en-us\",\n    };\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComic,\n    getCharacterByName,\n    getComicByName,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n"],"names":["className","src","avengers","alt","avengersLogo","style","display","width","height","objectFit","margin","error","useState","comicsList","setComicsList","newItemsLoading","setNewItemsLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComics","process","setProcess","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","length","items","map","item","i","CSSTransition","timeout","classNames","to","id","thumbnail","title","price","itemsContent","TransitionGroup","component","elements","useMemo","Component","Spinner","ErrorMessage","Error","setContent","onClick","disabled","comicName","setComicName","comic","setComic","blockVisibility","setBlockVisibility","getComicByName","res","searchResults","content","errorMessage","spinner","onSubmit","e","preventDefault","htmlFor","type","name","value","placeholder","onChange","target","onFocus","onBlur","setTimeout","Helmet","AppBanner","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","data","clearError","useHttp","_apiBase","_apiKey","getAllCharacters","results","_transformCharacter","getCharacter","getCharacterByName","_transformComics","getComic","comics","description","pageCount","prices","path","extension","language","textObjects","char","homepage","urls","wiki"],"sourceRoot":""}