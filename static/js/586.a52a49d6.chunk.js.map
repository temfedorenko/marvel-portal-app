{"version":3,"file":"static/js/586.a52a49d6.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/charSearch/CharSearch.js","components/errorBoundary/ErrorBoundary.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import error from './error.gif';\n\nconst ErrorMessage = () => {\n  return (\n    <img\n      style={{\n        display: 'block',\n        width: '250px',\n        height: '250px',\n        objectFit: 'contain',\n        margin: '0 auto',\n      }}\n      src={error}\n      alt=\"error animation\"\n    />\n  );\n};\n\nexport default ErrorMessage;\n","import { useState, useEffect } from \"react\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utils/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\n\nconst RandomChar = () => {\n  const [char, setChar] = useState({});\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateCharacter();\n\n    const timerId = setInterval(updateCharacter, 40000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateCharacter = () => {\n    clearError();\n\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then((res) => onCharLoaded(res))\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button onClick={updateCharacter} className=\"button button__main\">\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n\n  let thumbnailClassName = \"randomchar__img\";\n\n  if (thumbnail && thumbnail.endsWith(\"image_not_available.jpg\")) {\n    thumbnailClassName += \" contain\";\n  }\n\n  return (\n    <div className=\"randomchar__block\">\n      <img\n        src={thumbnail}\n        alt=\"Random character\"\n        className={thumbnailClassName}\n      />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description\n            ? `${description.slice(0, 206)}...`\n            : \"Unfortunately, there is no detailed information about this character:(\"}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RandomChar;\n","import { useState, useEffect, useRef } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport PropTypes from \"prop-types\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\nimport { useMemo } from \"react\";\n\nconst setContent = (process, Component, newItemsLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemsLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"unespected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemsLoading, setNewItemsLoading] = useState(false);\n  const [offset, setOffset] = useState(73);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemsLoading(false) : setNewItemsLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList((charList) => [...charList, ...newCharList]);\n    setNewItemsLoading(false);\n    setOffset((offset) => offset + 9);\n    setCharEnded(ended);\n  };\n\n  const refItems = useRef([]);\n\n  const onFocusItem = (i) => {\n    refItems.current.forEach((item) => {\n      item.classList.remove(\"char__item_selected\");\n    });\n    refItems.current[i].classList.add(\"char__item_selected\");\n  };\n\n  const items = charList.map((item, i) => {\n    let imgStyle = { objectFit: \"cover\" };\n    if (\n      item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\n      item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\n    ) {\n      imgStyle = { objectFit: \"unset\" };\n    }\n\n    return (\n      <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n        <li\n          className=\"char__item\"\n          tabIndex={0}\n          ref={(el) => (refItems.current[i] = el)}\n          onClick={() => {\n            props.onCharSelect(item.id);\n            onFocusItem(i);\n          }}\n          onKeyDown={(e) => {\n            if (e.key === \" \" || e.key === \"Enter\") {\n              e.preventDefault();\n              props.onCharSelect(item.id);\n              onFocusItem(i);\n            }\n          }}\n        >\n          <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n          <div className=\"char__name\">{item.name}</div>\n        </li>\n      </CSSTransition>\n    );\n  });\n\n  const itemsContent = () => {\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  };\n\n  const elements = useMemo(() => {\n    return setContent(process, itemsContent, newItemsLoading);\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemsLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelect: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport PropTypes from \"prop-types\";\n\nimport setContent from \"../../utils/setContent\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\" ||\n    thumbnail === \"http://i.annihil.us/u/prod/marvel/i/mg/f/60/4c002e0305708.gif\"\n  ) {\n    imgStyle = { objectFit: \"contain\" };\n  }\n\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description\n          ? `${description.slice(0, 205)}...`\n          : \"Unfortunately, there is no detailed information about this character:(\"}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comics with this character\"}\n        {comics.map((item, i) => {\n          return (\n            <li key={i} className=\"char__comics-item\">\n              <Link to={`/comics/${item.resourceURI.slice(43)}`}>{item.name}</Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nCharInfo.propTypes = {\n  charId: PropTypes.number,\n};\n\nexport default CharInfo;\n","import { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport useMarvelService from \"../../services/MarvelService\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Spinner from \"../spinner/Spinner\";\n\nimport \"./charSearch.scss\";\n\nconst CharSearch = () => {\n  const [charName, setCharName] = useState(\"\");\n  const [char, setChar] = useState(null);\n  const [validationMessage, setValidationMessage] = useState(\"\");\n  const { getCharacterByName, clearError, process, setProcess } =\n    useMarvelService();\n\n  const onChange = (e) => {\n    setCharName(e.target.value.toUpperCase());\n  };\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    if (charName.length === 0) {\n      setValidationMessage(\"This field is required\");\n      return;\n    }\n\n    if (charName.length < 3) {\n      setValidationMessage(\"At least three characters\");\n      return;\n    }\n\n    setValidationMessage(\"\");\n    updateCharacter(charName);\n  };\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n    setCharName(\"\");\n  };\n\n  const updateCharacter = () => {\n    clearError();\n\n    getCharacterByName(charName)\n      .then((res) => onCharLoaded(res))\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const searchResult = !char ? null : char.length > 0 ? (\n    <div className=\"char__search-success\">\n      <div className=\"char__search-visit\">\n        Click to visit {char[0].name}'s page\n      </div>\n      <Link\n        to={`/characters/${char[0].id}`}\n        className=\"button button__secondary\"\n      >\n        <div className=\"inner\">To page</div>\n      </Link>\n    </div>\n  ) : (\n    <div className=\"char__search-error\">This character was not found</div>\n  );\n  const validation = validationMessage ? (\n    <div className=\"char__search-error\">{validationMessage}</div>\n  ) : null;\n  const errorMessage = process === \"error\" ? <ErrorMessage /> : null;\n  const spinner = process === \"loading\" ? <Spinner /> : null;\n\n  return (\n    <div className=\"char__search\">\n      <form action=\"#\" className=\"char__search-form\" onSubmit={onSubmit}>\n        <label htmlFor=\"charName\" className=\"char__search-label\">\n          Find a character by name:\n        </label>\n        <input\n          className=\"char__search-input\"\n          id=\"charName\"\n          type=\"text\"\n          name=\"charName\"\n          value={charName}\n          placeholder=\"Enter a name here\"\n          onChange={onChange}\n          onFocus={() => {\n            setValidationMessage(\"\");\n            setChar(null);\n          }}\n        />\n        <button\n          type=\"submit\"\n          className=\"button button__main\"\n          disabled={process === \"loading\"}\n        >\n          <div className=\"inner\">Find</div>\n        </button>\n      </form>\n\n      <div className=\"char__search-result\">\n        {spinner}\n        {validation}\n        {errorMessage}\n        {process !== \"loading\" ? searchResult : null}\n      </div>\n    </div>\n  );\n};\n\nexport default CharSearch;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n  state = {\n    error: false,\n  };\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ error: true });\n  }\n\n  render() {\n    if (this.state.error) {\n      return <ErrorMessage />;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\n\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearch from \"../charSearch/CharSearch\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from \"../../resources/img/vision.png\";\n\nconst MainPage = () => {\n  const [selectedChar, setChar] = useState(null);\n\n  const onCharSelect = (id) => {\n    setChar(id);\n  };\n\n  return (\n    <>\n      <Helmet>\n        <meta name=\"description\" content=\"Marvel information portal\" />\n        <title>Marvel information</title>\n      </Helmet>\n      <ErrorBoundary>\n        <RandomChar />\n      </ErrorBoundary>\n      <ErrorBoundary>\n        <CharSearch />\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelect={onCharSelect} />\n        </ErrorBoundary>\n        <ErrorBoundary>\n          <CharInfo charId={selectedChar} />\n        </ErrorBoundary>\n      </div>\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n    </>\n  );\n};\n\nexport default MainPage;\n","import { useHttp } from \"../hooks/http.hook\";\n\nconst useMarvelService = () => {\n  const { request, clearError, process, setProcess } = useHttp();\n\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\n  const _apiKey = \"apikey=825a76f0069296d43a59fc01b51c7129\";\n  // const _apiKey = \"apikey=211c085f78942d7b553a3e154be3772e\";\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(\n      `${_apiBase}characters?orderBy=-modified&limit=9&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  };\n\n  const getCharacterByName = async (name) => {\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  };\n\n  const getAllComics = async (offset = 200) => {\n    const res = await request(\n      `${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  };\n\n  const getComicByName = async (name = \"\") => {\n    const res = await request(\n      `${_apiBase}comics?titleStartsWith=${name}&limit=30&${_apiKey}`\n    );\n    return res.data.results.map(_transformComics);\n  };\n\n  const _transformComics = (comics) => {\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: comics.description || \"There is no description\",\n      pageCount: comics.pageCount\n        ? `${comics.pageCount} p.`\n        : \"No information about the number of pages\",\n      price: comics.prices[0].price\n        ? `${comics.prices[0].price}$`\n        : \"Not available\",\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\n      language: comics.textObjects.language || \"en-us\",\n    };\n  };\n\n  const _transformCharacter = (char) => {\n    return {\n      id: char.id,\n      name: char.name,\n      description: char.description,\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items,\n    };\n  };\n\n  return {\n    clearError,\n    process,\n    setProcess,\n    getAllCharacters,\n    getCharacter,\n    getAllComics,\n    getComic,\n    getCharacterByName,\n    getComicByName,\n  };\n};\n\nexport default useMarvelService;\n","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n  const [process, setProcess] = useState(\"waiting\");\n\n  const request = useCallback(\n    async (\n      url,\n      method = \"GET\",\n      body = null,\n      headers = { \"Content-Type\": \"application/json\" }\n    ) => {\n      setProcess(\"loading\");\n\n      try {\n        const response = await fetch(url, { method, body, headers });\n\n        if (!response.ok) {\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        return data;\n      } catch (e) {\n        setProcess(\"error\");\n        throw e;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => {\n    setProcess(\"loading\");\n  }, []);\n\n  return { request, clearError, process, setProcess };\n};\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\nimport Skeleton from \"../components/skeleton/Skeleton\";\n\nconst setContent = (process, Component, data) => {\n  switch (process) {\n    case \"waiting\":\n      return <Skeleton />;\n    case \"loading\":\n      return <Spinner />;\n    case \"confirmed\":\n      return <Component data={data} />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"unespected process state\");\n  }\n};\n\nexport default setContent;\n"],"names":["style","display","width","height","objectFit","margin","src","error","alt","View","data","name","description","thumbnail","homepage","wiki","thumbnailClassName","endsWith","className","slice","href","useState","char","setChar","useMarvelService","getCharacter","clearError","process","setProcess","useEffect","updateCharacter","timerId","setInterval","clearInterval","id","Math","floor","random","then","res","onCharLoaded","setContent","onClick","mjolnir","props","charList","setCharList","newItemsLoading","setNewItemsLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","refItems","useRef","onFocusItem","i","current","forEach","item","classList","remove","add","items","map","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelect","onKeyDown","e","key","preventDefault","itemsContent","TransitionGroup","component","elements","useMemo","Component","Spinner","ErrorMessage","Error","disabled","comics","to","resourceURI","updateChar","charId","charName","setCharName","validationMessage","setValidationMessage","getCharacterByName","searchResult","validation","errorMessage","spinner","action","onSubmit","htmlFor","type","value","placeholder","onChange","target","toUpperCase","onFocus","ErrorBoundary","state","errorInfo","this","setState","children","selectedChar","Helmet","content","decoration","request","useCallback","url","method","body","headers","fetch","response","ok","status","json","useHttp","_apiBase","_apiKey","results","_transformCharacter","getAllComics","_transformComics","getComic","getComicByName","title","pageCount","price","prices","path","extension","language","textObjects","urls"],"sourceRoot":""}